;;-*-Lisp-*-
(in-package goal)

;; name: mod-custom-code.gc
;; name in dgo: mod-custom-code
;; dgos: TODO


;;;;;;;;;;;;;;;;;;;;;;;;;;
;; What is this file for.
;;;;;;;;;;;;;;;;;;;;;;;;;;

#| This file contains function defenitions that are pre placed in the mod base,
so if you place custom code inside of these functions, it will exectue based on
the name of the function, for example, if you place (set! (-> *game-info* fuel) (+ (-> *game-info* fuel) 1))
to the function named runs-on-orb-pickup, then jaks powercell count will increase each time you collect
an orb |#

(defun spawn-patched-blocking-planes ()
  (let ((verts (new 'stack-no-clear 'inline-array 'vector 2)))
    ;; test near geologist
    ;; (when (not (process-by-name "test-blocking-plane-1" *active-pool*))
    ;;   (set-vector-meters! (-> verts 0) 194.39  10.62 -1587.11)
    ;;   (set-vector-meters! (-> verts 1) 214.60  10.31 -1590.41)
    ;;   (blocking-plane-spawn-simple verts (meters 30.0) "test-blocking-plane-1")
    ;;   )

    ;; PUZZLE SKIP
    ;; left side
    (when (not (process-by-name "sunken-blocking-plane-0" *active-pool*))
      (set-vector-meters! (-> verts 0) 894.83 -170.4 -1795.44)
      (set-vector-meters! (-> verts 1) 914.64 -170.4 -1807.53)
      (blocking-plane-spawn-simple verts (meters 50.0) "sunken-blocking-plane-0")
      )
    ;; top side
    (when (not (process-by-name "sunken-blocking-plane-1" *active-pool*))
      (set-vector-meters! (-> verts 0) 890.26 -134.2 -1811.5)
      (set-vector-meters! (-> verts 1) 906.10 -134.2 -1759.5  )
      (blocking-plane-spawn-simple verts (meters 30.0) "sunken-blocking-plane-1")
      )
    ;; top-left side
    (when (not (process-by-name "sunken-blocking-plane-2" *active-pool*))
      (set-vector-meters! (-> verts 0) 883.91 -134.2 -1806.5)
      (set-vector-meters! (-> verts 1) 898.21 -134.2 -1786.0)
      (blocking-plane-spawn-simple verts (meters 30.0) "sunken-blocking-plane-2")
      )
    ;; top-right side
    (when (not (process-by-name "sunken-blocking-plane-3" *active-pool*))
      (set-vector-meters! (-> verts 0) 893.33 -134.2 -1786.2)
      (set-vector-meters! (-> verts 1) 898.32 -134.2 -1761.2)
      (blocking-plane-spawn-simple verts (meters 30.0) "sunken-blocking-plane-3")
      )
    ;; right side
    (when (not (process-by-name "sunken-blocking-plane-4" *active-pool*))
      (set-vector-meters! (-> verts 0) 901.30 -170.4 -1774.86)
      (set-vector-meters! (-> verts 1) 920.83 -170.4 -1776.60)
      (blocking-plane-spawn-simple verts (meters 50.0) "sunken-blocking-plane-4")
      )

    ;; BUTTON SKIP
    (when (not (process-by-name "sunken-blocking-plane-5" *active-pool*))
      (set-vector-meters! (-> verts 0) 579.72 -132.82 -1720.4)
      (set-vector-meters! (-> verts 1) 615.12 -132.82 -1679.2)
      (blocking-plane-spawn-simple verts (meters 30.0) "sunken-blocking-plane-5")
      )

    ;; BACKWARDS BOGGY
    (let ((should-spawn? (not (string= (-> *game-info* current-continue name) "swamp-cave3"))))
      (cond
        ((process-by-name "swamp-blocking-plane-0" *active-pool*)
          ;; plane is spawned, but if player has later boggy checkpoints -> despawn the wall
          (when (not should-spawn?)
            (deactivate (process-by-name "swamp-blocking-plane-0" *active-pool*))
            )
          )
        (else
          ;; plane is not spawned, and player has any checkpoint besides end of boggy -> spawn the wall
          (when should-spawn?
            (set-vector-meters! (-> verts 0) 448.42 -0.58 -1875.3)
            (set-vector-meters! (-> verts 1) 449.94 -0.58 -1855.2)
            (blocking-plane-spawn-simple verts (meters 35.0) "swamp-blocking-plane-0")
            )
          )
        )
      (cond
        ((process-by-name "swamp-blocking-plane-1" *active-pool*)
          ;; plane is spawned, but if player has later boggy checkpoints -> despawn the wall
          (when (not should-spawn?)
            (deactivate (process-by-name "swamp-blocking-plane-1" *active-pool*))
            )
          )
        (else
          ;; plane is not spawned, and player has any checkpoint besides end of boggy -> spawn the wall
          (when should-spawn?
            (set-vector-meters! (-> verts 0) 449.94 -0.58 -1855.2)
            (set-vector-meters! (-> verts 1) 461.71 -0.58 -1838.8)
            (blocking-plane-spawn-simple verts (meters 35.0) "swamp-blocking-plane-1")
            )
          )
        )
      )

    ;; BOGGY FLUTFLUT OOBS
    ;; main noLTS oob
    (when (not (process-by-name "swamp-blocking-plane-2" *active-pool*))
      (set-vector-meters! (-> verts 0) 504.75 17.81 -2125.7)
      (set-vector-meters! (-> verts 1) 532.42 17.81 -2160.7)
      (blocking-plane-spawn-simple verts (meters 35.0) "swamp-blocking-plane-2")
      )
    ;; infin jump ceiling right
    (when (not (process-by-name "swamp-blocking-plane-3" *active-pool*))
      (set-vector-meters! (-> verts 0) 529.2 13.0 -2087.0)
      (set-vector-meters! (-> verts 1) 517.42 13.0 -2095.8)
      (blocking-plane-spawn-simple verts (meters 30.0) "swamp-blocking-plane-3")
      )
    ;; infin jump ceiling left
    (when (not (process-by-name "swamp-blocking-plane-4" *active-pool*))
      (set-vector-meters! (-> verts 0) 524.86 13.0 -2072.9)
      (set-vector-meters! (-> verts 1) 529.2 13.0 -2087.0)
      (blocking-plane-spawn-simple verts (meters 30.0) "swamp-blocking-plane-4")
      )

    ;; SNOWY FLUTFLUT OOBS
    ;; replacement for original plane
    (cond
      ((not (process-by-name "snowy-blocking-plane-0" *active-pool*))
        (when (on-flut?)
          ;; plane doesnt exist and we're on flut -> spawn it
          (set-vector-meters! (-> verts 0) 560.26 244.7 -3368.5)
          (set-vector-meters! (-> verts 1) 655.61 244.7 -3434.7)
          (blocking-plane-spawn-simple verts (meters 60.0) "snowy-blocking-plane-0")
          )
        )
      ((not (on-flut?))
        ;; plane exists but we're not on flut -> deactivate it
        (deactivate (process-by-name "snowy-blocking-plane-0" *active-pool*))
        )
      )
    ;; perpendicular to original plane to prevent walljump
    (cond
      ((not (process-by-name "snowy-blocking-plane-1" *active-pool*))
        (when (on-flut?)
          ;; plane doesnt exist and we're on flut -> spawn it
          (set-vector-meters! (-> verts 0) 591.35 244.7 -3443.4)
          (set-vector-meters! (-> verts 1) 619.42 244.7 -3409.5)
          (blocking-plane-spawn-simple verts (meters 60.0) "snowy-blocking-plane-1")
          )
        )
      ((not (on-flut?))
        ;; plane exists but we're not on flut -> deactivate it
        (deactivate (process-by-name "snowy-blocking-plane-1" *active-pool*))
        )
      )

    ;; SNOWY OPEN GATE CELL
    (cond
      ((not (process-by-name "snowy-blocking-plane-2" *active-pool*))
        (when (and (not (on-flut?))
                   (not (task-complete? *game-info* (game-task snow-ball)))
                   )
          ;; plane doesnt exist and we're not on flut and haven't gotten cell -> spawn it
          (set-vector-meters! (-> verts 0) 858.87 161.25 -3320.5)
          (set-vector-meters! (-> verts 1) 814.82 161.25 -3320.5)
          (blocking-plane-spawn-simple verts (meters 40.0) "snowy-blocking-plane-2")
          )
        )
      ((or (on-flut?) (task-complete? *game-info* (game-task snow-ball)))
        ;; plane exists but we're on flut or got cell -> deactivate it
        (deactivate (process-by-name "snowy-blocking-plane-2" *active-pool*))
        )
      )
    )
  (none)
  )

;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Begin function defintions.
;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun runs-every-frame ()
  ;; PATCHED - no boosteds
  (set! (-> *edge-surface* fric) 1530000.0)
    
  ;; PATCHED - spawn some invisible planes
  (spawn-patched-blocking-planes)
  
  (if *show-input-display* 
    (input-display-on)
    (input-display-off)
    )

  (none)
  )

(defun runs-on-orb-pickup ((parent process-tree))
  (let* ((from-cache? (and parent (type-type? (-> parent type) orb-cache-top))))
    ;; Code here runs on ANY orb pickup


    (when from-cache?
      ;; Code here runs only if the orb was from an orb cache

      )

    (when (not from-cache?)
      ;; Code here runs only if the orb was NOT from an orb cache

      )
    )
  (none)
  )

(defun runs-on-fly-pickup ()
  ;; Code here runs on any scout fly pickup

  (none)
  )

(defun runs-on-cell-pickup ((cell-event symbol))
  (case cell-event
    (('pickup)      
      ;; Code here runs as soon as you pickup a powercell

      )
    (('cutscene-end)      
      ;; Code here runs at the end of any powercell cutscene

      )
    )

  (none)
  )

(defun runs-on-eco-pickup ((eco-type pickup-type) (parent process-tree))
  (let* ((from-vent? (and parent (type-type? (-> parent type) vent))))
    ;; Code here runs as soon as you pickup ANY eco

    (case eco-type
      (((pickup-type eco-yellow))      
        ;; Code here runs as soon as you pickup yellow eco

        )
      (((pickup-type eco-red))      
        ;; Code here runs as soon as you pickup red eco

        )
      (((pickup-type eco-blue))      
        ;; Code here runs as soon as you pickup blue eco

        )
      (((pickup-type eco-pill))      
        ;; Code here runs as soon as you pickup small green eco

        )
      (((pickup-type eco-green))      
        ;; Code here runs as soon as you pickup big green eco 

        )
      )
    
    (when from-vent?
      ;; Code here runs only if the eco was picked up from a vent

      )
    )

  (none)
  )

(defun runs-on-jak-spawn ()
  ;; Code here runs every time jak spawns (loading a file new game or death)

  ;;uncomment this to use custom music for custom levels - the function is in mod-common-functions.gc
  ;;(process-spawn-function process music-manager-proc)
  (none)
  )

(defun runs-on-jak-death ((death-event symbol))
  (case death-event
    (('dying)
      ;; Code here runs immediately every time jak dies, before any death animation or death cutscene
      
      )
    (('blackout)
      ;; Code here runs after jak dies (and any death cutscene finishes), during the blackout before he spawns

      )
    )
  
  (none)
  )


    ;;;;;;;;;;;;;;;;;;;;;;;;;;
    ;; deprecated function defintions.
    ;;;;;;;;;;;;;;;;;;;;;;;;;;

    #| these are no longer recommended/supported however we include them anyways to not break anyones mods.
    |#
